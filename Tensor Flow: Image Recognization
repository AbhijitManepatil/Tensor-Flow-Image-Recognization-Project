import tensorflow as tf
import keras

import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

fashion_mnist=keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels)=fashion_mnist.load_data()

class_names=['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

#featurs of training datasets
print("Shape of traning images(features): ",train_images.shape)
print("Shape of training labels(Output): ",train_labels.shape)
print("Length of labels: ", len(train_labels))
print(train_labels)
#print(train_labels[0])
#print(train_images[0])

#featurs of testing datasets
print("Shape of the test images(Fetures/input): ",test_images.shape)
print("shape of the test labels(output): ", test_labels.shape)
print("Length of the test labels: ",len(test_labels))

#################################################################
##############Preprocess the Data###############################
################################################################
#see the 1st image of training dataset
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.gca()
plt.show()

#cast the datatype of the image components from an integer to a float, and divide by 255
train_images=train_images/255.0
test_images=test_images/255.0

#Display the first 25 images from training dataset along with its class
import matplotlib.pyplot as plt

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid()
    a=plt.imshow(train_images[i],cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
    plt.show(a)

#Build model

#Create a model

model=keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),  #from 2D to 1D array ie. 28*28=784
    keras.layers.Dense(218,activation=tf.nn.relu),
    keras.layers.Dense(10,activation=tf.nn.softmax)
])

#Compile the model

model.compile(optimizer=tf.train.AdamOptimizer(),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Train the model

model.fit(train_images,train_labels, epochs=5)

# Evaluate accuracy
# Compare the model with Test Datasets

test_loss, test_acc=model.evaluate(test_images,test_labels)

print("***** Test Accuracy****** : ", test_acc)
print("***** Test Loss ****** :", test_loss)

#Make a prediction

predictions=model.predict(test_images) #provide input to the predict ie test image
print("Prediction Output: Value of Oth label :",predictions[0])
print("Prediction of arge max from 0th label:",np.argmax(predictions[0]))

print("Cheacking the model: ")
print("Test Label for the 0th position: ", test_labels[0])



